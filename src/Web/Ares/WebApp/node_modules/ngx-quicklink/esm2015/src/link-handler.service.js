import * as tslib_1 from "tslib";
import { Injectable, InjectionToken } from '@angular/core';
import { RouterPreloader } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
const ɵ0 = function (cb) {
    const start = Date.now();
    return setTimeout(function () {
        cb({
            didTimeout: false,
            timeRemaining: function () {
                return Math.max(0, 50 - (Date.now() - start));
            }
        });
    }, 1);
}, ɵ1 = () => { };
const requestIdleCallback = typeof window !== 'undefined'
    ? window.requestIdleCallback || ɵ0
    : ɵ1;
const observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;
const ɵ2 = observerSupported;
export const LinkHandler = new InjectionToken('LinkHandler');
let ObservableLinkHandler = class ObservableLinkHandler {
    constructor(loader, queue) {
        this.loader = loader;
        this.queue = queue;
        this.elementLink = new Map();
        this.observer = observerSupported()
            ? new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const link = entry.target;
                        const routerLink = this.elementLink.get(link);
                        if (!routerLink || !routerLink.urlTree)
                            return;
                        this.queue.add(routerLink.urlTree);
                        this.observer.unobserve(link);
                        requestIdleCallback(() => {
                            this.loader.preload().subscribe(() => void 0);
                            this.queue.remove(routerLink.urlTree);
                        });
                    }
                });
            })
            : null;
    }
    register(el) {
        this.elementLink.set(el.element, el);
        this.observer.observe(el.element);
    }
    // First call to unregister will not hit this.
    unregister(el) {
        if (this.elementLink.has(el.element)) {
            this.observer.unobserve(el.element);
            this.elementLink.delete(el.element);
        }
    }
    supported() {
        return observerSupported();
    }
};
ObservableLinkHandler = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry])
], ObservableLinkHandler);
export { ObservableLinkHandler };
let PreloadLinkHandler = class PreloadLinkHandler {
    constructor(loader, queue) {
        this.loader = loader;
        this.queue = queue;
    }
    register(el) {
        this.queue.add(el.urlTree);
        requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));
    }
    unregister(_) { }
    supported() {
        return true;
    }
};
PreloadLinkHandler = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry])
], PreloadLinkHandler);
export { PreloadLinkHandler };
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay1oYW5kbGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcXVpY2tsaW5rLyIsInNvdXJjZXMiOlsic3JjL2xpbmstaGFuZGxlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7V0FtQnpELFVBQVMsRUFBWTtJQUNuQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekIsT0FBTyxVQUFVLENBQUM7UUFDaEIsRUFBRSxDQUFDO1lBQ0QsVUFBVSxFQUFFLEtBQUs7WUFDakIsYUFBYSxFQUFFO2dCQUNiLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEQsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNSLENBQUMsT0FDRCxHQUFHLEVBQUUsR0FBRSxDQUFDO0FBZGQsTUFBTSxtQkFBbUIsR0FDdkIsT0FBTyxNQUFNLEtBQUssV0FBVztJQUMzQixDQUFDLENBQUUsTUFBYyxDQUFDLG1CQUFtQixNQVdsQztJQUNILENBQUMsR0FBUyxDQUFDO0FBRWYsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLEVBQUUsQ0FDN0IsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsTUFBYyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7O0FBRWpGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUc3RCxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtJQXNCaEMsWUFBb0IsTUFBdUIsRUFBVSxLQUF1QjtRQUF4RCxXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBckJwRSxnQkFBVyxHQUFHLElBQUksR0FBRyxFQUEwQixDQUFDO1FBQ2hELGFBQVEsR0FBZ0MsaUJBQWlCLEVBQUU7WUFDakUsQ0FBQyxDQUFDLElBQUksb0JBQW9CLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2pDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3RCLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTt3QkFDeEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQTJCLENBQUM7d0JBRS9DLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUM5QyxJQUFLLENBQUMsVUFBVSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU87NEJBQUcsT0FBTzt3QkFFakQsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3dCQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDOUIsbUJBQW1CLENBQUMsR0FBRyxFQUFFOzRCQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOzRCQUM5QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQ3hDLENBQUMsQ0FBQyxDQUFDO3FCQUNKO2dCQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDO1lBQ0osQ0FBQyxDQUFDLElBQUksQ0FBQztJQUVzRSxDQUFDO0lBRWhGLFFBQVEsQ0FBQyxFQUFpQjtRQUN4QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsOENBQThDO0lBQzlDLFVBQVUsQ0FBQyxFQUFpQjtRQUMxQixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQztJQUVELFNBQVM7UUFDUCxPQUFPLGlCQUFpQixFQUFFLENBQUM7SUFDN0IsQ0FBQztDQUNGLENBQUE7QUF4Q1kscUJBQXFCO0lBRGpDLFVBQVUsRUFBRTs2Q0F1QmlCLGVBQWUsRUFBaUIsZ0JBQWdCO0dBdEJqRSxxQkFBcUIsQ0F3Q2pDO1NBeENZLHFCQUFxQjtBQTJDbEMsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7SUFDN0IsWUFBb0IsTUFBdUIsRUFBVSxLQUF1QjtRQUF4RCxXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWtCO0lBQUcsQ0FBQztJQUVoRixRQUFRLENBQUMsRUFBaUI7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQsVUFBVSxDQUFDLENBQWdCLElBQUcsQ0FBQztJQUUvQixTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQTtBQWJZLGtCQUFrQjtJQUQ5QixVQUFVLEVBQUU7NkNBRWlCLGVBQWUsRUFBaUIsZ0JBQWdCO0dBRGpFLGtCQUFrQixDQWE5QjtTQWJZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMaW5rRGlyZWN0aXZlIH0gZnJvbSAnLi9saW5rLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBSb3V0ZXJQcmVsb2FkZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTGlua0hhbmRsZXJTdHJhdGVneSB9IGZyb20gJy4vbGluay1oYW5kbGVyLXN0cmF0ZWd5JztcbmltcG9ydCB7IFByZWZldGNoUmVnaXN0cnkgfSBmcm9tICcuL3ByZWZldGNoLXJlZ2lzdHJ5LnNlcnZpY2UnO1xuXG50eXBlIFJlcXVlc3RJZGxlQ2FsbGJhY2tIYW5kbGUgPSBhbnk7XG50eXBlIFJlcXVlc3RJZGxlQ2FsbGJhY2tPcHRpb25zID0ge1xuICB0aW1lb3V0OiBudW1iZXI7XG59O1xudHlwZSBSZXF1ZXN0SWRsZUNhbGxiYWNrRGVhZGxpbmUgPSB7XG4gIHJlYWRvbmx5IGRpZFRpbWVvdXQ6IGJvb2xlYW47XG4gIHRpbWVSZW1haW5pbmc6ICgoKSA9PiBudW1iZXIpO1xufTtcblxudHlwZSBSZXF1ZXN0SWRsZUNhbGxiYWNrID0gKChcbiAgY2FsbGJhY2s6ICgoZGVhZGxpbmU6IFJlcXVlc3RJZGxlQ2FsbGJhY2tEZWFkbGluZSkgPT4gdm9pZCksXG4gIG9wdHM/OiBSZXF1ZXN0SWRsZUNhbGxiYWNrT3B0aW9uc1xuKSA9PiBSZXF1ZXN0SWRsZUNhbGxiYWNrSGFuZGxlKTtcblxuY29uc3QgcmVxdWVzdElkbGVDYWxsYmFjazogUmVxdWVzdElkbGVDYWxsYmFjayA9XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyAod2luZG93IGFzIGFueSkucmVxdWVzdElkbGVDYWxsYmFjayB8fFxuICAgICAgZnVuY3Rpb24oY2I6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2Ioe1xuICAgICAgICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICAgICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIDUwIC0gKERhdGUubm93KCkgLSBzdGFydCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAxKTtcbiAgICAgIH1cbiAgICA6ICgpID0+IHt9O1xuXG5jb25zdCBvYnNlcnZlclN1cHBvcnRlZCA9ICgpID0+XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gISEod2luZG93IGFzIGFueSkuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgOiBmYWxzZTtcblxuZXhwb3J0IGNvbnN0IExpbmtIYW5kbGVyID0gbmV3IEluamVjdGlvblRva2VuKCdMaW5rSGFuZGxlcicpO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZUxpbmtIYW5kbGVyIGltcGxlbWVudHMgTGlua0hhbmRsZXJTdHJhdGVneSB7XG4gIHByaXZhdGUgZWxlbWVudExpbmsgPSBuZXcgTWFwPEVsZW1lbnQsIExpbmtEaXJlY3RpdmU+KCk7XG4gIHByaXZhdGUgb2JzZXJ2ZXI6IEludGVyc2VjdGlvbk9ic2VydmVyIHwgbnVsbCA9IG9ic2VydmVyU3VwcG9ydGVkKClcbiAgICA/IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBlbnRyeS50YXJnZXQgYXMgSFRNTEFuY2hvckVsZW1lbnQ7XG5cbiAgICAgICAgICAgIGNvbnN0IHJvdXRlckxpbmsgPSB0aGlzLmVsZW1lbnRMaW5rLmdldChsaW5rKTtcbiAgICAgICAgICAgIGlmICggIXJvdXRlckxpbmsgfHwgIXJvdXRlckxpbmsudXJsVHJlZSApIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy5xdWV1ZS5hZGQocm91dGVyTGluay51cmxUcmVlKTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIudW5vYnNlcnZlKGxpbmspO1xuICAgICAgICAgICAgcmVxdWVzdElkbGVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMubG9hZGVyLnByZWxvYWQoKS5zdWJzY3JpYmUoKCkgPT4gdm9pZCAwKTtcbiAgICAgICAgICAgICAgdGhpcy5xdWV1ZS5yZW1vdmUocm91dGVyTGluay51cmxUcmVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgIDogbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvYWRlcjogUm91dGVyUHJlbG9hZGVyLCBwcml2YXRlIHF1ZXVlOiBQcmVmZXRjaFJlZ2lzdHJ5KSB7fVxuXG4gIHJlZ2lzdGVyKGVsOiBMaW5rRGlyZWN0aXZlKSB7XG4gICAgdGhpcy5lbGVtZW50TGluay5zZXQoZWwuZWxlbWVudCwgZWwpO1xuICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZShlbC5lbGVtZW50KTtcbiAgfVxuXG4gIC8vIEZpcnN0IGNhbGwgdG8gdW5yZWdpc3RlciB3aWxsIG5vdCBoaXQgdGhpcy5cbiAgdW5yZWdpc3RlcihlbDogTGlua0RpcmVjdGl2ZSkge1xuICAgIGlmICh0aGlzLmVsZW1lbnRMaW5rLmhhcyhlbC5lbGVtZW50KSkge1xuICAgICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUoZWwuZWxlbWVudCk7XG4gICAgICB0aGlzLmVsZW1lbnRMaW5rLmRlbGV0ZShlbC5lbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBzdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIG9ic2VydmVyU3VwcG9ydGVkKCk7XG4gIH1cbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByZWxvYWRMaW5rSGFuZGxlciBpbXBsZW1lbnRzIExpbmtIYW5kbGVyU3RyYXRlZ3kge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvYWRlcjogUm91dGVyUHJlbG9hZGVyLCBwcml2YXRlIHF1ZXVlOiBQcmVmZXRjaFJlZ2lzdHJ5KSB7fVxuXG4gIHJlZ2lzdGVyKGVsOiBMaW5rRGlyZWN0aXZlKSB7XG4gICAgdGhpcy5xdWV1ZS5hZGQoZWwudXJsVHJlZSk7XG4gICAgcmVxdWVzdElkbGVDYWxsYmFjaygoKSA9PiB0aGlzLmxvYWRlci5wcmVsb2FkKCkuc3Vic2NyaWJlKCgpID0+IHZvaWQgMCkpO1xuICB9XG5cbiAgdW5yZWdpc3RlcihfOiBMaW5rRGlyZWN0aXZlKSB7fVxuXG4gIHN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIl19