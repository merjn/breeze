{"version":3,"file":"ngx-moment.js","sources":["../../../src/add.pipe.ts","../../../src/calendar.pipe.ts","../../../src/date-format.pipe.ts","../../../src/difference.pipe.ts","../../../src/moment-options.ts","../../../src/duration.pipe.ts","../../../src/from-unix.pipe.ts","../../../src/parse.pipe.ts","../../../src/from-utc.pipe.ts","../../../src/is-after.pipe.ts","../../../src/is-before.pipe.ts","../../../src/local.pipe.ts","../../../src/locale.pipe.ts","../../../src/parse-zone.pipe.ts","../../../src/subtract.pipe.ts","../../../src/time-ago.pipe.ts","../../../src/utc.pipe.ts","../../../src/moment.module.ts","../../../src/ngx-moment.ts"],"names":["momentConstructor","moment.isMoment","moment.duration","moment.relativeTimeThreshold","moment.unix","moment.utc","moment.parseZone","moment.isDate","moment.locale"],"mappings":"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","sourcesContent":["/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amAdd' })\nexport class AddPipe implements PipeTransform {\n  transform(\n    value: moment.MomentInput,\n    amount: moment.DurationInputArg1,\n    unit?: moment.DurationInputArg2,\n  ): any {\n    if (\n      typeof amount === 'undefined' ||\n      (typeof amount === 'number' && typeof unit === 'undefined')\n    ) {\n      throw new Error('AddPipe: missing required arguments');\n    }\n    return momentConstructor(value).add(amount, unit);\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport {\n  Pipe,\n  ChangeDetectorRef,\n  PipeTransform,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport * as moment from 'moment';\nimport { Subscription } from 'rxjs';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amCalendar', pure: false })\nexport class CalendarPipe implements PipeTransform, OnDestroy {\n  /**\n   * Internal reference counter, so we can clean up when no instances are in use\n   */\n  private static refs = 0;\n\n  private static timer: number | null = null;\n  private static midnight: EventEmitter<Date> | null = null;\n\n  private midnightSub: Subscription;\n\n  constructor(private cdRef: ChangeDetectorRef, private ngZone: NgZone) {\n    // using a single static timer for all instances of this pipe for performance reasons\n    CalendarPipe.initTimer(ngZone);\n\n    CalendarPipe.refs++;\n\n    // values such as Today will need to be replaced with Yesterday after midnight,\n    // so make sure we subscribe to an EventEmitter that we set up to emit at midnight\n    this.midnightSub = CalendarPipe.midnight.subscribe(() => {\n      this.ngZone.run(() => this.cdRef.markForCheck());\n    });\n  }\n\n  transform(value: moment.MomentInput, ...args: any[]): any {\n    let formats: any = null;\n    let referenceTime: any = null;\n\n    for (let i = 0, len = args.length; i < len; i++) {\n      if (args[i] !== null) {\n        if (typeof args[i] === 'object' && !moment.isMoment(args[i])) {\n          formats = args[i];\n        } else {\n          referenceTime = momentConstructor(args[i]);\n        }\n      }\n    }\n\n    return momentConstructor(value).calendar(referenceTime, formats);\n  }\n\n  ngOnDestroy(): void {\n    if (CalendarPipe.refs > 0) {\n      CalendarPipe.refs--;\n    }\n\n    if (CalendarPipe.refs === 0) {\n      CalendarPipe.removeTimer();\n    }\n\n    this.midnightSub.unsubscribe();\n  }\n\n  private static initTimer(ngZone: NgZone) {\n    // initialize the timer\n    if (!CalendarPipe.midnight) {\n      CalendarPipe.midnight = new EventEmitter<Date>();\n      if (typeof window !== 'undefined') {\n        const timeToUpdate = CalendarPipe._getMillisecondsUntilUpdate();\n        CalendarPipe.timer = ngZone.runOutsideAngular(() => {\n          return window.setTimeout(() => {\n            // emit the current date\n            CalendarPipe.midnight.emit(new Date());\n\n            // refresh the timer\n            CalendarPipe.removeTimer();\n            CalendarPipe.initTimer(ngZone);\n          }, timeToUpdate);\n        });\n      }\n    }\n  }\n\n  private static removeTimer() {\n    if (CalendarPipe.timer) {\n      window.clearTimeout(CalendarPipe.timer);\n      CalendarPipe.timer = null;\n      CalendarPipe.midnight = null;\n    }\n  }\n\n  private static _getMillisecondsUntilUpdate() {\n    const now = momentConstructor();\n    const tomorrow = momentConstructor().startOf('day').add(1, 'days');\n    const timeToMidnight = tomorrow.valueOf() - now.valueOf();\n    return timeToMidnight + 1000; // 1 second after midnight\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amDateFormat' })\nexport class DateFormatPipe implements PipeTransform {\n  transform(value: moment.MomentInput, ...args: any[]): string {\n    if (!value) {\n      return '';\n    }\n    return momentConstructor(value).format(args[0]);\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amDifference' })\nexport class DifferencePipe implements PipeTransform {\n  transform(\n    value: moment.MomentInput,\n    otherValue: moment.MomentInput,\n    unit?: moment.unitOfTime.Diff,\n    precision?: boolean,\n  ): number {\n    const date = momentConstructor(value);\n    const date2 = otherValue !== null ? momentConstructor(otherValue) : momentConstructor();\n\n    return date.diff(date2, unit, precision);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const NGX_MOMENT_OPTIONS: InjectionToken<NgxMomentOptions> = new InjectionToken<\n  NgxMomentOptions\n>('NGX_MOMENT_OPTIONS');\n\nexport interface NgxMomentOptions {\n  /**\n   * relativeTimeThresholdOptions\n   * @description Provides the `relativeTimeThreshold` units allowing a pipe to set the `moment.relativeTimeThreshold` values.\n   * The `key` is a unit defined as one of `ss`, `s`, `m`, `h`, `d`, `M`.\n   * @see https://momentjs.com/docs/#/customization/relative-time-threshold/\n   * @example by default more than 45 seconds is considered a minute, more than 22 hours is considered a day and so on.\n   * So settings the unit 'm' to `59` will adjust the `relativeTimeThreshold` and consider more than 59 minutes\n   * to be an hour (default is `45 minutes`)\n   */\n  relativeTimeThresholdOptions: { [key: string]: number };\n}\n","import * as moment from 'moment';\n\nimport { Inject, Optional, Pipe, PipeTransform } from '@angular/core';\nimport { NGX_MOMENT_OPTIONS, NgxMomentOptions } from './moment-options';\n\n@Pipe({ name: 'amDuration' })\nexport class DurationPipe implements PipeTransform {\n  allowedUnits: Array<string> = ['ss', 's', 'm', 'h', 'd', 'M'];\n\n  constructor(@Optional() @Inject(NGX_MOMENT_OPTIONS) momentOptions?: NgxMomentOptions) {\n    this._applyOptions(momentOptions);\n  }\n\n  transform(value: moment.DurationInputArg1, ...args: string[]): string {\n    if (typeof args === 'undefined' || args.length !== 1) {\n      throw new Error('DurationPipe: missing required time unit argument');\n    }\n    return moment.duration(value, args[0] as moment.unitOfTime.DurationConstructor).humanize();\n  }\n\n  private _applyOptions(momentOptions: NgxMomentOptions): void {\n    if (!momentOptions) {\n      return;\n    }\n\n    if (!!momentOptions.relativeTimeThresholdOptions) {\n      const units: Array<string> = Object.keys(momentOptions.relativeTimeThresholdOptions);\n      const filteredUnits: Array<string> = units.filter(\n        (unit) => this.allowedUnits.indexOf(unit) !== -1,\n      );\n      filteredUnits.forEach((unit) => {\n        moment.relativeTimeThreshold(unit, momentOptions.relativeTimeThresholdOptions[unit]);\n      });\n    }\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\n@Pipe({ name: 'amFromUnix' })\nexport class FromUnixPipe implements PipeTransform {\n  transform(value: number | string, ...args: string[]): any {\n    return typeof value === 'string' ? moment.unix(parseInt(value, 10)) : moment.unix(value);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amParse' })\nexport class ParsePipe implements PipeTransform {\n  transform(value: moment.MomentInput, formats: string | string[]): moment.Moment {\n    return momentConstructor(value, formats);\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\n@Pipe({ name: 'amFromUtc' })\nexport class FromUtcPipe implements PipeTransform {\n  transform(value: moment.MomentInput, formats?: string | string[], ...args: string[]): any {\n    return formats ? moment.utc(value, formats) : moment.utc(value);\n  }\n}\n","import * as moment from 'moment';\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nconst momentConstructor = moment;\n\n@Pipe({\n  name: 'amIsAfter',\n})\nexport class IsAfterPipe implements PipeTransform {\n  transform(\n    value: moment.MomentInput,\n    otherValue: moment.MomentInput,\n    unit?: moment.unitOfTime.StartOf,\n  ): boolean {\n    return momentConstructor(value).isAfter(momentConstructor(otherValue), unit);\n  }\n}\n","import * as moment from 'moment';\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nconst momentConstructor = moment;\n\n@Pipe({\n  name: 'amIsBefore',\n})\nexport class IsBeforePipe implements PipeTransform {\n  transform(\n    value: moment.MomentInput,\n    otherValue: moment.MomentInput,\n    unit?: moment.unitOfTime.StartOf,\n  ): boolean {\n    return momentConstructor(value).isBefore(momentConstructor(otherValue), unit);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amLocal' })\nexport class LocalTimePipe implements PipeTransform {\n  transform(value: moment.MomentInput): moment.Moment {\n    return momentConstructor(value).local();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\n// See https://github.com/ng-packagr/ng-packagr/issues/217 for why this is needed:\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amLocale' })\nexport class LocalePipe implements PipeTransform {\n  transform(value: moment.MomentInput, locale: string): moment.Moment {\n    return momentConstructor(value).locale(locale);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\n@Pipe({ name: 'amParseZone' })\nexport class ParseZonePipe implements PipeTransform {\n  transform(value: moment.MomentInput): moment.Moment {\n    return moment.parseZone(value);\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amSubtract' })\nexport class SubtractPipe implements PipeTransform {\n  transform(\n    value: moment.MomentInput,\n    amount: moment.DurationInputArg1,\n    unit?: moment.DurationInputArg2,\n  ): any {\n    if (\n      typeof amount === 'undefined' ||\n      (typeof amount === 'number' && typeof unit === 'undefined')\n    ) {\n      throw new Error('SubtractPipe: missing required arguments');\n    }\n    return momentConstructor(value).subtract(amount, unit);\n  }\n}\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\n\nimport { Pipe, ChangeDetectorRef, PipeTransform, OnDestroy, NgZone } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amTimeAgo', pure: false })\nexport class TimeAgoPipe implements PipeTransform, OnDestroy {\n  private currentTimer: number | null;\n\n  private lastTime: Number;\n  private lastValue: moment.MomentInput;\n  private lastOmitSuffix: boolean;\n  private lastLocale?: string;\n  private lastText: string;\n  private formatFn: (m: moment.Moment) => string;\n\n  constructor(private cdRef: ChangeDetectorRef, private ngZone: NgZone) {}\n\n  format(m: moment.Moment) {\n    return m.from(momentConstructor(), this.lastOmitSuffix);\n  }\n\n  transform(\n    value: moment.MomentInput,\n    omitSuffix?: boolean,\n    formatFn?: (m: moment.Moment) => string,\n  ): string {\n    if (this.hasChanged(value, omitSuffix)) {\n      this.lastTime = this.getTime(value);\n      this.lastValue = value;\n      this.lastOmitSuffix = omitSuffix;\n      this.lastLocale = this.getLocale(value);\n      this.formatFn = formatFn || this.format.bind(this);\n      this.removeTimer();\n      this.createTimer();\n      this.lastText = this.formatFn(momentConstructor(value));\n    } else {\n      this.createTimer();\n    }\n\n    return this.lastText;\n  }\n\n  ngOnDestroy(): void {\n    this.removeTimer();\n  }\n\n  private createTimer() {\n    if (this.currentTimer) {\n      return;\n    }\n\n    const momentInstance = momentConstructor(this.lastValue);\n    const timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;\n\n    this.currentTimer = this.ngZone.runOutsideAngular(() => {\n      if (typeof window !== 'undefined') {\n        return window.setTimeout(() => {\n          this.lastText = this.formatFn(momentConstructor(this.lastValue));\n\n          this.currentTimer = null;\n          this.ngZone.run(() => this.cdRef.markForCheck());\n        }, timeToUpdate);\n      } else {\n        return null;\n      }\n    });\n  }\n\n  private removeTimer() {\n    if (this.currentTimer) {\n      window.clearTimeout(this.currentTimer);\n      this.currentTimer = null;\n    }\n  }\n\n  private getSecondsUntilUpdate(momentInstance: moment.Moment) {\n    const howOld = Math.abs(momentConstructor().diff(momentInstance, 'minute'));\n    if (howOld < 1) {\n      return 1;\n    } else if (howOld < 60) {\n      return 30;\n    } else if (howOld < 180) {\n      return 300;\n    } else {\n      return 3600;\n    }\n  }\n\n  private hasChanged(value: moment.MomentInput, omitSuffix?: boolean): boolean {\n    return (\n      this.getTime(value) !== this.lastTime ||\n      this.getLocale(value) !== this.lastLocale ||\n      omitSuffix !== this.lastOmitSuffix\n    );\n  }\n\n  private getTime(value: moment.MomentInput): number {\n    if (moment.isDate(value)) {\n      return value.getTime();\n    } else if (moment.isMoment(value)) {\n      return value.valueOf();\n    } else {\n      return momentConstructor(value).valueOf();\n    }\n  }\n\n  private getLocale(value: moment.MomentInput): string | null {\n    return moment.isMoment(value) ? value.locale() : moment.locale();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\nconst momentConstructor = moment;\n\n@Pipe({ name: 'amUtc' })\nexport class UtcPipe implements PipeTransform {\n  transform(value: moment.MomentInput): moment.Moment {\n    return momentConstructor(value).utc();\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NGX_MOMENT_OPTIONS, NgxMomentOptions } from './moment-options';\n\nimport { AddPipe } from './add.pipe';\nimport { CalendarPipe } from './calendar.pipe';\nimport { DateFormatPipe } from './date-format.pipe';\nimport { DifferencePipe } from './difference.pipe';\nimport { DurationPipe } from './duration.pipe';\nimport { FromUnixPipe } from './from-unix.pipe';\nimport { FromUtcPipe } from './from-utc.pipe';\nimport { IsAfterPipe } from './is-after.pipe';\nimport { IsBeforePipe } from './is-before.pipe';\nimport { LocalTimePipe } from './local.pipe';\nimport { LocalePipe } from './locale.pipe';\nimport { ParsePipe } from './parse.pipe';\nimport { ParseZonePipe } from './parse-zone.pipe';\nimport { SubtractPipe } from './subtract.pipe';\nimport { TimeAgoPipe } from './time-ago.pipe';\nimport { UtcPipe } from './utc.pipe';\n\nconst ANGULAR_MOMENT_PIPES = [\n  AddPipe,\n  CalendarPipe,\n  DateFormatPipe,\n  DifferencePipe,\n  DurationPipe,\n  FromUnixPipe,\n  ParsePipe,\n  SubtractPipe,\n  TimeAgoPipe,\n  UtcPipe,\n  FromUtcPipe,\n  LocalTimePipe,\n  LocalePipe,\n  ParseZonePipe,\n  IsBeforePipe,\n  IsAfterPipe,\n];\n\n@NgModule({\n  declarations: ANGULAR_MOMENT_PIPES,\n  exports: ANGULAR_MOMENT_PIPES,\n})\nexport class MomentModule {\n  static forRoot(options?: NgxMomentOptions): ModuleWithProviders<MomentModule> {\n    return {\n      ngModule: MomentModule,\n      providers: [\n        {\n          provide: NGX_MOMENT_OPTIONS,\n          useValue: {\n            ...options,\n          },\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}